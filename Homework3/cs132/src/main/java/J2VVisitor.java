//
// Generated by JTB 1.3.2
//

import visitor.*;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class J2VVisitor implements GJVisitor<String, Context> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public String visit(NodeList n, Context argu) {
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeListOptional n, Context argu) {
      if ( n.present() ) {
         String _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public String visit(NodeOptional n, Context argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public String visit(NodeSequence n, Context argu) {
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeToken n, Context argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
    // TODO
   public String visit(Goal n, Context argu) {
      String _ret=null;

      // argu.currentClass = "Main";
      // argu.classList.add("Main");

      argu.printVMT();

      // argu.print("func Main()");
      // argu.addIndent();

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      // argu.print("ret");
      argu.subIndent();

      if (argu.arrayAlloc) {
            argu.printAllocArray();            
      }

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
    // TODO
   public String visit(MainClass n, Context argu) {
      String _ret=null;

      argu.currentClass = "Main";
      argu.classList.add("Main");

      argu.print("func Main()");
      argu.addIndent();

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      n.f17.accept(this, argu);

      argu.print("ret");
      argu.subIndent();
      System.out.println("");

      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
    // TODO
   public String visit(TypeDeclaration n, Context argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
    // TODO
   public String visit(ClassDeclaration n, Context argu) {
      String _ret=null;

      n.f0.accept(this, argu);
      String f1Output = n.f1.accept(this, argu);

      argu.currentClass = f1Output;

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
    // TODO
   public String visit(ClassExtendsDeclaration n, Context argu) {
      String _ret=null;
      n.f0.accept(this, argu);

      String f1Output = n.f1.accept(this, argu);

      argu.currentClass = f1Output;

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
    // TODO
   public String visit(VarDeclaration n, Context argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
    // TODO
   public String visit(MethodDeclaration n, Context argu) {
      String _ret=null;
      argu.T = 0;
      argu.tempVar2Class.clear();
      n.f0.accept(this, argu);
      String f1Output = n.f1.accept(this, argu);
      String f2Output = n.f2.accept(this, argu);
      argu.currentMethod = f2Output;

      n.f3.accept(this, argu);
      String f4Output = n.f4.accept(this, argu);

      if (!argu.getCurrentFormals().equals("")) {
            argu.currentFormals = " " + argu.getCurrentFormals();
      }
      argu.print("func %s.%s(this%s)", argu.currentClass, f2Output, argu.currentFormals);
      argu.addIndent();


      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String f10Output = n.f10.accept(this, argu);

      if (f10Output.startsWith("[this")) {
            argu.print("%s = %s", "t." + argu.T, f10Output);
            f10Output = "t." + argu.T;
            argu.addT();
      }

      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      argu.print("ret %s", f10Output);
      argu.subIndent();
      argu.clearFormals();
      System.out.println("");      

      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
    // TODO
   public String visit(FormalParameterList n, Context argu) {
      String _ret=null;
      String f0Output = n.f0.accept(this, argu);
      argu.currentFormals = "";
      argu.currentFormals += f0Output + " ";

      n.f1.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
    // TODO
   public String visit(FormalParameter n, Context argu) {
      n.f0.accept(this, argu);
      String f1Output = n.f1.accept(this, argu);
      return f1Output;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
    // TODO
   public String visit(FormalParameterRest n, Context argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      String f1Output = n.f1.accept(this, argu);

      argu.currentFormals += f1Output + " ";

      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
    // TODO
   public String visit(Type n, Context argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
    // TODO
   public String visit(ArrayType n, Context argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
    // TODO
   public String visit(BooleanType n, Context argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
    // TODO
   public String visit(IntegerType n, Context argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
    // TODO
   public String visit(Statement n, Context argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
    // TODO
   public String visit(Block n, Context argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
    // TODO
   public String visit(AssignmentStatement n, Context argu) {
      String _ret=null;
      argu.calledFromAS = true;

      String f0Output = n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      // System.out.println("F0: " + f0Output);

      // if (f0Output.startsWith("[this")) {
      //       System.out.println("INHERE1");
      //       String t = "t." + argu.T;
      //       if (argu.tempVar2Array.containsKey(f0Output)) {
      //             System.out.println("INHERE2");
      //             argu.tempVar2Array.put(t, argu.tempVar2Array.get(f0Output));
      //             argu.tempVar2Array.remove(f0Output);
      //       }
      //       if (argu.tempVar2Fields.containsKey(f0Output)) {
      //             System.out.println("INHERE3");
      //             System.out.println("Updating: " + t + " -> " + argu.tempVar2Fields.get(f0Output));
      //             argu.tempVar2Fields.put(t, argu.tempVar2Fields.get(f0Output));
      //             argu.tempVar2Fields.remove(f0Output);
      //       }
      //       f0Output = t;
      //       argu.addT();
      // }

      argu.tempVar2String.clear();

      String f2Output = n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      if (argu.tempVar2Class.containsKey(f2Output)) {
            argu.tempVar2Class.put(f0Output, argu.tempVar2Class.get(f2Output));
            argu.tempVar2Class.remove(f2Output);
      }

      if (f2Output.contains("call :AllocArray") || (argu.tempVar2Array.containsKey(f2Output) && argu.tempVar2Array.get(f2Output).contains("call :AllocArray"))) {
            if (argu.tempVar2Array.containsKey(f2Output)) {
                  f2Output = argu.tempVar2Array.get(f2Output);     
            }
            String allocSize = f2Output.substring(f2Output.indexOf("(") + 1, f2Output.indexOf(")"));
            argu.arraySize.put(f0Output, allocSize);

            String ret =  f2Output.substring(0, f2Output.indexOf(" "));
            argu.tempVar2Array.put(ret, f0Output);

            argu.print(f2Output);            

            f2Output = ret;
      }

      if (argu.assigningLookUpRes) {
            String t = "t." + argu.T;
            argu.print("%s = %s", t, f2Output);
            argu.printNullCheck(t);
            f2Output = "[" + t + "]";

            argu.assigningLookUpRes = false;
      }
      
      if (!argu.tempVar2String.isEmpty()) {
            int size = argu.tempVar2String.size();
            for (int i = 0; i < size; i++) {     
                  // System.out.println("===>1");             
                  if (i == size - 1) {
                        for (String key : argu.tempVar2String.get(i).keySet()) {
                              if (key.equals("ifcheck") || key.equals("boundcheck")) {
                                    argu.print("%s", argu.tempVar2String.get(i).get(key));                                                                                                      
                              }
                              else {
                                    if (f0Output.startsWith("[this")) {
                                          String t = "t." + argu.T;
                                          argu.addT();

                                          argu.print("%s = %s", t, argu.tempVar2String.get(i).get(key).trim());
                                          argu.print("%s = %s", f0Output, t);
                                    }
                                    else {
                                          argu.print("%s = %s", f0Output, argu.tempVar2String.get(i).get(key).trim());                                                                                                            
                                    }                                    
                              }
                        }
                        break;
                  }
                  for (String key : argu.tempVar2String.get(i).keySet()) {
                        if (key.equals("ifcheck") || key.equals("boundcheck")) {
                              argu.print("%s", argu.tempVar2String.get(i).get(key));                                                                                                                                    
                        }
                        else {
                              if (key.startsWith("[this")) {
                                    String t = "t." + argu.T;
                                    argu.addT();
                                    argu.print("%s = %s", t, argu.tempVar2String.get(i).get(key).trim());
                                    argu.print("%s = %s", key, t);
                              }
                              else {
                                    argu.print("%s = %s", key, argu.tempVar2String.get(i).get(key).trim());                                                                  
                              }
                        }
                        
                  }    
            }
      } 
      // else if (!argu.tempVar2Fields.isEmpty()) {
      //       if ()            
      // }
      else {            
            // if (f0Output.startsWith("[this") && argu.newIdent && argu.currentClass.equals("Main")) {
            //       String t = "t." + argu.T;
            //       // argu.addT();
            //       argu.print("%s = %s", t, f2Output.trim());
            //       argu.newIdent = false;
            // }
            // else {
                  argu.print("%s = %s", f0Output, f2Output.trim());       
            // }            
      }


      argu.calledFromAS = false;

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
    // TODO
   public String visit(ArrayAssignmentStatement n, Context argu) {
      String ret = null;
      String f0Output = n.f0.accept(this, argu);

      String t = "t." + argu.T;
      argu.addT();
      
      if (f0Output.startsWith("[this") || !f0Output.startsWith("t.")) {
            argu.print("%s = %s", t, f0Output);
            argu.printNullCheck(t);
      }

      n.f1.accept(this, argu);
      String f2Output = n.f2.accept(this, argu);

      String t2 = "t." + argu.T;
      argu.print("%s = [%s]", t2, t);
      argu.print("%s = LtS(%s %s)", t2, f2Output, t2);
      argu.print("neg = LtS(%s 0)", f2Output);

      argu.print("if %s goto :bounds%d", t2, argu.B);
      argu.print("  Error(\"array index out of bounds\")");
      argu.print("bounds%d:", argu.B);

      argu.addB();

      argu.print("if0 neg goto :bounds%d", argu.B);
      argu.print("  Error(\"array index out of bounds\")");
      argu.print("bounds%d:", argu.B);

      argu.print("%s = MulS(%s 4)", t2, f2Output);
      argu.print("%s = Add(%s %s)", t2, t2, t);

      // argu.addT();

      ret = "t." + argu.T;
      // argu.print("%s = [%s+4]", "this", t);

      argu.addB();
      argu.addT();

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String f5Output = n.f5.accept(this, argu);

      argu.print("[%s+4] = %s", t2, f5Output);

      n.f6.accept(this, argu);
      return ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
    // TODO
   public String visit(IfStatement n, Context argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String f2Output = n.f2.accept(this, argu);

      int currentI = argu.I;
      argu.addI();
      argu.print("if0 %s goto :if%d_else", f2Output, currentI);
      argu.addIndent();

      n.f3.accept(this, argu);
      String f4Output = n.f4.accept(this, argu);

      argu.print("goto :if%d_end", currentI);
      argu.subIndent();
      n.f5.accept(this, argu);

      argu.print("if%d_else:", currentI);
      argu.addIndent();

      String f6Output = n.f6.accept(this, argu);

      argu.subIndent();
      argu.print("if%d_end:", currentI);

      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
    // TODO
   public String visit(WhileStatement n, Context argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      int w = argu.W;
      argu.print("while%d_top:", w);
      argu.addW();

      String f2Output = n.f2.accept(this, argu);

      argu.print("if0 %s goto :while%d_end", f2Output, w);
      argu.addIndent();

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      argu.print("goto :while%d_top", w);
      argu.subIndent();
      argu.print("while%d_end:", w);

      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
    // TODO
   public String visit(PrintStatement n, Context argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String f2Output = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      argu.print("PrintIntS(%s)", f2Output);

      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
    // TODO
   public String visit(Expression n, Context argu) {
      String f0Output = n.f0.accept(this, argu);
      return f0Output;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
    // TODO
   public String visit(AndExpression n, Context argu) {
      String _ret=null;

      String t = "t." + argu.T;
      argu.addT();

      String f0Output = n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      argu.print("if0 %s goto :ss%d_else", f0Output, argu.A);
      argu.addIndent();

      argu.calledFromAE = true;
      String f2Output = n.f2.accept(this, argu);

      if (argu.methodFields.get(argu.currentClass).get(argu.currentMethod).containsKey(f2Output)) {
            argu.print("%s = Sub(1 %s)", t, f2Output);
      }
      else {
            argu.print("%s = %s", t, f2Output);            
      }
      argu.print("goto :ss%d_end", argu.A);

      argu.subIndent();
      argu.print("ss%d_else:", argu.A);
      argu.addIndent();
      argu.print("%s = 0", t);
      argu.subIndent();
      argu.print("ss%d_end:", argu.A);

      argu.addA();

      argu.calledFromAE = false;

      return t;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
    // TODO
   public String visit(CompareExpression n, Context argu) {
      String f0Output = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String f2Output = n.f2.accept(this, argu);

      String ret = "t." + argu.T;
      if (argu.calledFromAS) {
            String s = argu.formString("LtS(%s %s)", f0Output, f2Output);

            if (argu.calledFromMS) {
                  argu.tempVarInMsgSnd.put(ret, s);
            }
            else {
                  HashMap<String, String> holder = new HashMap<String, String>();
                  holder.put(ret, s);
                  argu.tempVar2String.add(holder);
                  
            }
      }
      else {
            argu.print("%s = LtS(%s %s)", ret, f0Output, f2Output);
            argu.addT();
      }

      return ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
    // TODO
   public String visit(PlusExpression n, Context argu) {
      String f0Output = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String f2Output = n.f2.accept(this, argu);
      
      String ret = "t." + argu.T;
      if (argu.calledFromAS) {
            String s = argu.formString("Add(%s %s)", f0Output, f2Output);
            if (argu.calledFromMS) {
                  argu.tempVarInMsgSnd.put(ret, s);
            }
            else {
                  HashMap<String, String> holder = new HashMap<String, String>();
                  holder.put(ret, s);
                  argu.tempVar2String.add(holder);
                  
            }
      }
      else {
            argu.print("%s = Add(%s %s)", ret, f0Output, f2Output);
            argu.addT();
      }

      return ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
    // TODO
   public String visit(MinusExpression n, Context argu) {
      String f0Output = n.f0.accept(this, argu);

      n.f1.accept(this, argu);
      String f2Output = n.f2.accept(this, argu);

      String ret = "t." + argu.T;
      if (argu.calledFromAS) {
            String s = argu.formString("Sub(%s %s)", f0Output, f2Output);

            if (argu.calledFromMS) {
                  argu.tempVarInMsgSnd.put(ret, s);
            }
            else {
                  HashMap<String, String> holder = new HashMap<String, String>();
                  holder.put(ret, s);
                  argu.tempVar2String.add(holder);
                  
            }
      }
      else {
            argu.print("%s = Sub(%s %s)", ret, f0Output, f2Output);
            argu.addT();
      }

      return ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
    // TODO
   public String visit(TimesExpression n, Context argu) {
      String f0Output = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String f2Output = n.f2.accept(this, argu);

      String ret = "t." + argu.T;
      if (argu.calledFromAS) {
            String s = argu.formString("MulS(%s %s)", f0Output, f2Output);

            if (argu.calledFromMS) {
                  argu.tempVarInMsgSnd.put(ret, s);
            }
            else {
                  HashMap<String, String> holder = new HashMap<String, String>();
                  holder.put(ret, s);
                  argu.tempVar2String.add(holder);
                  
            }
      }
      else {
            argu.print("%s = MulS(%s %s)", ret, f0Output, f2Output);
            argu.addT();
      }

      return ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
    // TODO
   public String visit(ArrayLookup n, Context argu) {
      String ret=null;
      String f0Output = n.f0.accept(this, argu);

      n.f1.accept(this, argu);
      String f2Output = n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      String initF0 = f0Output;
      if (argu.tempVar2Array.containsKey(f0Output)) {
            f0Output = argu.tempVar2Array.get(f0Output);
      }

      if (argu.calledFromAS) {
            HashMap<String, String> holder = new HashMap<String, String>();
            holder.put("ifcheck", String.format("if %s goto :null%d", f0Output, argu.N).toString());
            argu.tempVar2String.add(holder);

            holder = new HashMap<String, String>();
            holder.put("ifcheck", String.format("  Error(\"null pointer\")").toString());
            argu.tempVar2String.add(holder);

            holder = new HashMap<String, String>();
            holder.put("ifcheck", String.format("null%d:", argu.N).toString());
            argu.tempVar2String.add(holder);

            argu.addN();
      }
      else {
            argu.printNullCheck(f0Output);           
      }

      String t = "t." + argu.T;

      if (argu.calledFromAS) {
            HashMap<String, String> holder = new HashMap<String, String>();
            holder.put(t, String.format("[%s]", f0Output));
            argu.tempVar2String.add(holder);

            holder = new HashMap<String, String>();
            holder.put(t, String.format("LtS(%s %s)", f2Output, t));
            argu.tempVar2String.add(holder);

            holder = new HashMap<String, String>();
            holder.put("boundcheck", String.format("if %s goto :bounds%d", t, argu.B));
            argu.tempVar2String.add(holder);

            holder = new HashMap<String, String>();
            holder.put("boundcheck", String.format("  Error(\"array index out of bounds\")"));
            argu.tempVar2String.add(holder);

            holder = new HashMap<String, String>();
            holder.put("boundcheck", String.format("bounds%d:", argu.B));
            argu.tempVar2String.add(holder);

            holder = new HashMap<String, String>();
            holder.put(t, String.format("MulS(%s 4)", f2Output));
            argu.tempVar2String.add(holder);

            holder = new HashMap<String, String>();
            holder.put(t, String.format("Add(%s %s)", t, f0Output));
            argu.tempVar2String.add(holder);

            argu.addT();

            holder = new HashMap<String, String>();
            holder.put("", String.format("[%s+4]", t));
            argu.tempVar2String.add(holder);

            argu.addB();
            // argu.addT();
      }
      else 
      {
            argu.print("%s = [%s]", t, f0Output);
            argu.print("%s = LtS(%s %s)", t, f2Output, t);

            argu.print("if %s goto :bounds%d", t, argu.B);
            argu.print("  Error(\"array index out of bounds\")");
            argu.print("bounds%d:", argu.B);

            argu.print("%s = MulS(%s 4)", t, f2Output);
            argu.print("%s = Add(%s %s)", t, t, f0Output);

            argu.addT();

            ret = "t." + argu.T;
            argu.print("%s = [%s+4]", ret, t);
            t = ret;

            argu.addB();
            argu.addT();
      }

      return t;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
    // TODO
   public String visit(ArrayLength n, Context argu) {
      String _ret=null;

      argu.lengthLookUp = true;

      String f0Output = n.f0.accept(this, argu);

      String s = argu.tempVar2Array.get(f0Output);
      argu.assigningLookUpRes = true;
      argu.lengthLookUp = false; 

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return s;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
    // TODO
   public String visit(MessageSend n, Context argu) {
      String _ret=null;
      String f0Output = n.f0.accept(this, argu);

      argu.calledFromMS = true;
      if (argu.classObject.containsKey(f0Output) || argu.currentClass.equals("Main") || argu.tempVar2Fields.containsKey(f0Output) || argu.tempVar2Class.containsKey(f0Output) || argu.getFromMethodFormals(argu.currentClass, argu.currentMethod, f0Output) != null) {
            if (argu.calledFromAS) {
                  HashMap<String, String> holder = new HashMap<String, String>();
                  holder.put("ifcheck", String.format("if %s goto :null%d", f0Output, argu.N).toString());
                  argu.tempVar2String.add(holder);

                  holder = new HashMap<String, String>();
                  holder.put("ifcheck", String.format("  Error(\"null pointer\")").toString());
                  argu.tempVar2String.add(holder);

                  holder = new HashMap<String, String>();
                  holder.put("ifcheck", String.format("null%d:", argu.N).toString());
                  argu.tempVar2String.add(holder);
      
                  argu.addN();
            }
            else {
                  argu.printNullCheck(f0Output);           
            }
      }

      n.f1.accept(this, argu);
      String f2Output = n.f2.accept(this, argu);

      // System.out.println("Message Send: " + f0Output + " -> " + f2Output);
      String className = argu.tempVar2Class.get(f0Output);
      if (className == null) {
            if (argu.tempVar2Fields.get(f0Output) != null) {
                  className = argu.tempVar2Fields.get(f0Output);
            }
            if (argu.classObject.containsKey(f0Output)) {
                  className = argu.classObject.get(f0Output);
            }
            if (argu.getFromMethodFormals(argu.currentClass, argu.currentMethod, f0Output) != null) {
                  className = argu.getFromMethodFormals(argu.currentClass, argu.currentMethod, f0Output);
            }
      }

      String returnType = null;
      if (argu.classMethods.containsKey(className)) {
            if (argu.classMethods.get(className).containsKey(f2Output)) {
                  returnType = argu.classMethods.get(className).get(f2Output);
            }
      }
      // else {
      //       argu.tempVar2Class.remove(f0Output);
      //       argu.addT();
      // }

      String type = "";
      if (argu.getFieldType(argu.currentClass, f0Output) != null) {
            type = argu.getFieldType(argu.currentClass, f0Output);
      }
      else if (argu.getFromMethodFormals(argu.currentClass, argu.currentMethod, f0Output) != null) {
            type = argu.getFromMethodFormals(argu.currentClass, argu.currentMethod, f0Output);
      }
      if (!type.equals("")) {
            type = argu.getMethodType(type, f2Output);
      }

      if (f0Output.equals("this")) {
            className = argu.currentClass;
      }

      int index = 0;
      String callFunc = "";

      if (argu.VMT.containsKey(className)) {
            for (String key : argu.VMT.get(className).keySet()) {
                  if (key.equals(f2Output)) {
                        break;
                  }
                  else {
                        index++;
                  }
            }            
            String t = "t." + argu.T;
            if (argu.calledFromAS) {
                  HashMap<String, String> holder = new HashMap<String, String>();
                  holder.put(t, argu.formString("[%s]", f0Output));
                  argu.tempVar2String.add(holder);

                  holder = new HashMap<String, String>();
                  holder.put(t, argu.formString("[%s+%d]", t, index*4));
                  argu.tempVar2String.add(holder);
            }
            else {
                  argu.print("%s = [%s]", t, f0Output);
                  argu.print("%s = [%s+%d]", t, t, index*4);
            }
            argu.addT();
            callFunc = t;
      }

      n.f3.accept(this, argu);

      argu.ExpList.add("");
      String f4Output = n.f4.accept(this, argu);
      
      argu.currentExpList = argu.ExpList.get(argu.ExpList.size() - 1);
      argu.ExpList.remove(argu.ExpList.size() - 1);

      String t2 = "t." + argu.T;
      if (!argu.getCurrentExpList().equals("")) {
            argu.currentExpList = " " + argu.getCurrentExpList();


            String[] split = argu.currentExpList.split(" ");

            for (String key : argu.tempVarInMsgSnd.keySet()) {
                  argu.print("%s = %s", key, argu.tempVarInMsgSnd.get(key).trim());
            }
      }
      
      if (argu.calledFromAS) {
            String out = argu.formString("call %s(%s%s)", callFunc, f0Output, argu.currentExpList);

            HashMap<String, String> holder = new HashMap<String, String>();
            holder.put(t2, out);
            
            argu.tempVar2String.add(holder);
      }
      else {
            argu.print("%s = call %s(%s%s)", t2, callFunc, f0Output, argu.currentExpList);
      }
      argu.addT();
      argu.clearExpList();

      if (argu.tempVar2Class.containsKey(f0Output)) {
            // System.out.println("TV2C has key: " + f0Output);
            if (returnType != null) {
                  argu.tempVar2Class.put(t2, returnType);                  
            }
            else {
                  argu.tempVar2Class.put(t2, argu.tempVar2Class.get(f0Output));                  
            }
      }

      n.f5.accept(this, argu);

      if (!type.equals("") && argu.classList.contains(type) && !type.equals("int") && !type.equals("boolean")) {
            argu.tempVar2Class.put(t2, type);
      }

      argu.calledFromMS = false;
      argu.returnFromMS = true;

      return t2;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
    // TODO
   public String visit(ExpressionList n, Context argu) {
      String _ret=null;
      String f0Output = n.f0.accept(this, argu);
      
      String currentExpList = argu.ExpList.get(argu.ExpList.size() - 1);

      currentExpList += f0Output + " ";

      argu.ExpList.remove(argu.ExpList.size() - 1);      
      argu.ExpList.add(currentExpList);
      
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
    // TODO
   public String visit(ExpressionRest n, Context argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      String f1Output = n.f1.accept(this, argu);

      String currentExpList = argu.ExpList.get(argu.ExpList.size() - 1);

      currentExpList += f1Output + " ";

      argu.ExpList.remove(argu.ExpList.size() - 1);
      argu.ExpList.add(currentExpList);
      
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
    // TODO
   public String visit(PrimaryExpression n, Context argu) {
      String f0Output = n.f0.accept(this, argu);

      if (f0Output.startsWith("[this")) {
            String t = "t." + argu.T;
            if (argu.tempVar2Array.containsKey(f0Output)) {
                  argu.tempVar2Array.put(t, argu.tempVar2Array.get(f0Output));
                  argu.tempVar2Array.remove(f0Output);
            }
            if (argu.tempVar2Fields.containsKey(f0Output)) {
                  argu.tempVar2Fields.put(t, argu.tempVar2Fields.get(f0Output));
                  argu.tempVar2Fields.remove(f0Output);
            }

            if (argu.calledFromAS) {
                  String s = argu.formString("%s", f0Output);
                  
                  HashMap<String, String> holder = new HashMap<String, String>();
                  holder.put(t, s);
      
                  argu.tempVar2String.add(holder);
            }
            else {
                  if (!argu.currentClass.equals("Main")) {
                        argu.print("%s = %s", "t." + argu.T, f0Output);                        
                  }
            }
            f0Output = t;
            argu.addT();
      }
      return f0Output;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
    // TODO
   public String visit(IntegerLiteral n, Context argu) {
      n.f0.accept(this, argu);
      return n.f0.toString();
   }

   /**
    * f0 -> "true"
    */
    // TODO
   public String visit(TrueLiteral n, Context argu) {
      n.f0.accept(this, argu);
      return "1";
   }

   /**
    * f0 -> "false"
    */
    // TODO
   public String visit(FalseLiteral n, Context argu) {
      n.f0.accept(this, argu);
      return "0";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
    // TODO
   public String visit(Identifier n, Context argu) {
      n.f0.accept(this, argu);

      String ret = n.f0.toString();

      if (argu.classFields.containsKey(argu.currentClass)) {
            int index = 0;
            for (String key : argu.classFields.get(argu.currentClass).keySet()) {
                  if (key.equals(ret)) {
                        String s = String.format("[this+%d]", index*4);
                        String type = argu.getFromMethodFormals(argu.currentClass, argu.currentMethod, ret);
                        if (type == null) {
                              type = argu.getFieldType(argu.currentClass, ret);
                              if (type != null) {
                                    argu.tempVar2Fields.put(s, type);
                              }
                        }
                        else {
                              argu.tempVar2Fields.put(s, type);
                        }
                        if (argu.tempVar2Array.containsKey(ret)) {
                              argu.tempVar2Array.put(s, argu.tempVar2Array.get(ret));
                        }
                        ret = s;
                  }
                  index++;
            }
      }

      if (argu.lengthLookUp) {
            for (String k : argu.tempVar2Array.keySet()) {
                  if (argu.tempVar2Array.get(k).equals(ret)) {
                        return k;
                  }
            }
      }

      return ret;
   }

   /**
    * f0 -> "this"
    */
    // TODO
   public String visit(ThisExpression n, Context argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return "this";
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
    // TODO
   public String visit(ArrayAllocationExpression n, Context argu) {

      argu.arrayAlloc = true;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String f3Output = n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      String t = "t." + argu.T;
      argu.addT();

      String ret = t + " = call :AllocArray(" + f3Output +")";

      argu.tempVar2Array.put(t, ret);

      return t;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
    // TODO
   public String visit(AllocationExpression n, Context argu) {
      n.f0.accept(this, argu);
      String f1Output = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      argu.newIdent = true;

      String t = "t." + argu.T;
      if (argu.classList.contains(f1Output)) {
            argu.print("%s = HeapAllocZ(%d)", t, argu.classFields.get(f1Output).keySet().size() * 4);
            argu.print("[%s] = :vmt_%s", t, f1Output);
            argu.addT();

            argu.tempVar2Class.put(t, f1Output);
      }
      return t;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
    // TODO
   public String visit(NotExpression n, Context argu) {
      
      n.f0.accept(this, argu);
      String f1Output = n.f1.accept(this, argu);

      String ret = "t." + argu.T;
      if (argu.calledFromAE) {
            ret = f1Output;
      }
      else {
            argu.print("%s = Sub(1 %s)", ret, f1Output);      
            argu.addT();      
      }

      return ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
    // TODO
   public String visit(BracketExpression n, Context argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      String f1Output = n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      // if ()

      return f1Output;
   }

}
